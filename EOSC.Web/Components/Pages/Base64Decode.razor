@page "/base64"
@using MediaTypeHeaderValue = System.Net.Http.Headers.MediaTypeHeaderValue
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore

@inject HttpClient HttpClient
@using EOSC.Common.Requests
@using EOSC.Common.Responses
@using EOSC.Common.Services

<PageTitle>Base 64 Decode/Encode</PageTitle>

<h1>Base 64 Decode/Encode</h1>

<div class="input-group">
    <span class="input-group-text">With textarea</span>
    <textarea class="form-control" aria-label="With textarea"></textarea>
</div>

<div class="input-group mb-3">
    <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false"></button>
    <ul class="dropdown-menu">

        <li>
            <div class="dropdown-item" @onclick="SetToEncode">Encode</div>
        </li>
        <li>
            <div class="dropdown-item" @onclick="SetToDecode">Decode</div>
        </li>
    </ul>
    <textarea class="form-control" aria-label="With textarea" @bind="InputText"></textarea>
    <button class="btn btn-primary" @onclick="MakeHttpRequest">Submit</button>
</div>

<div class="border border-primary rounded bg-light p-3 " style="width:100%;height:90%;overflow:scroll;word-wrap: break-word;">
    <code class="text-black">@(new MarkupString(_responseMessage))</code>
</div>

@code {
    private readonly ApiCallService _apiCallService = new();
    private string? _responseMessage;
    private string SwapMode { get; set; } = "Encode";
    private string InputText { get; set; } = "";

    private void SetToEncode()
    {
        SwapMode = "Encode";
    }

    private void SetToDecode()
    {
        SwapMode = "Decode";
    }

    private async Task MakeHttpRequest()
    {
        try
        {
            if (string.IsNullOrEmpty(InputText))
            {
                return;
            }

            switch (SwapMode)
            {
                case "Encode":
                    var base64EncodeResponse =
                        await _apiCallService.MakeApiCall<Base64EncodeRequest, Base64EncodeResponse>(
                            "/api/b64e",
                            new Base64EncodeRequest(InputText));

                    _responseMessage = base64EncodeResponse.EncodedMessage;
                    break;

                case "Decode":
                    var base64DecodeResponse =
                        await _apiCallService.MakeApiCall<Base64DecodeRequest, Base64DecodeResponse>(
                            "/api/b64d",
                            new Base64DecodeRequest(InputText));
                    _responseMessage = base64DecodeResponse.DecodedMessage;
                    break;
            }
        }
        catch (Exception ex)
        {
            _responseMessage = "Error: " + ex.Message;
        }
    }
}
@page "/serialise"
@using EOSC.Common.Services
@using EOSC.Common.Requests
@using EOSC.Common.Responses
@inject ApiCallService _apiCallService

<PageTitle>Formatting Tool</PageTitle>

<h1>Formatting Tool</h1>

<div class="container px-1 py-1  border border-primary rounded" style="height:100%;width:100%;">
    <div class="row gx-1" style="height:100%">
        <div class="col" style="height:100%;width: 45%;">
            <div class="p-3 border bg-light rounded" style="height:100%">
                <textarea class="form-control bg-light" style="width: 100%; height:90%;border: none;overflow: auto;" aria-label="With textarea" placeholder="Paste text..." @bind="InputText"></textarea>
                <div class="" style="height:10%">
                    <button class="btn btn-outline-secondary dropdown-toggle btn-m px-3" type="button" data-bs-toggle="dropdown" aria-expanded="false">@SwapMode</button>
                    <ul class="dropdown-menu">
                        <li>
                            <div class="dropdown-item" @onclick="SetToJson">JSON</div>
                        </li>
                        <li>
                            <div class="dropdown-item" @onclick="SetToXml">XML</div>
                        </li>
                        <li>
                            <div class="dropdown-item" @onclick="SetToHtml">HTML</div>
                        </li>
                    </ul>
                    <button class="btn btn-primary" @onclick="FormatText">Convert</button>
                </div>
            </div>
        </div>
        <div class="col" style="height:100%;width: 45%;">
            <div class="p-3 border bg-light rounded" style="height:100%;width:100%">
                <pre style="height:100%;width:100%;overflow: scroll;"><code class="language-java" style="height: 100%;width: 100%;">@_responseMessage</code></pre>
            </div>
        </div>
    </div>
</div>


@code {

    private string? _responseMessage;
    private string SwapMode { get; set; } = "JSON";
    private string InputText { get; set; } = "";

    private void SetToJson()
    {
        SwapMode = "JSON";
    }

    private void SetToXml()
    {
        SwapMode = "XML";
    }

    private void SetToHtml()
    {
        SwapMode = "HTML";
    }

    private async Task FormatText()
    {
        _responseMessage = SwapMode switch
        {
            "JSON" => await JsonPrettier(),
            "XML" => await FormatXMl(),
            "HTML" => await FormatXMl(),
            _ => _responseMessage
        };
    }

    private async Task<string> FormatXMl()
    {
        string formattedXml;

        {
            try
            {
                var requestObject = new XmlPrettyRequest(InputText);
                var jsonPretty =
                    await _apiCallService.MakeApiCall<XmlPrettyRequest, XmlPrettyResponse>(
                        "/api/JsonFormat/xmlpretty",
                        requestObject);

                formattedXml = jsonPretty.PrettyXml;
            }
            catch (Exception ex)
            {
                formattedXml = "Error: " + ex.Message;
            }
        }
        return formattedXml;
    }

    private async Task<string> formatHTML()
    {

        string formattedHtml;
        try
        {
            string content = $"Please format (tabs = 4 spaces) the following HTML, I am using it in an application so please don't return anything besides the formatted HTML: {InputText}";

            GPTRequest request = new GPTRequest
            (
                content
            );
            var response =
            await _apiCallService.MakeApiCall<GPTRequest, GPTResponse>(
                "/api/GPT",
                request
            );

            formattedHtml = response.responseString;
        }
        catch (Exception ex)
            {
                formattedHtml = "Error: " + ex.Message;
            }

        return formattedHtml;
    }

    private async Task<string> JsonPrettier()
    {
        try
        {
            var requestObject = new JsonPrettyRequest(InputText);
            var jsonPretty =
                await _apiCallService.MakeApiCall<JsonPrettyRequest, JsonPrettyResponse>(
                    "/api/JsonFormat",
                    requestObject);

            return jsonPretty.PrettifiedJson;
        }
        catch (Exception ex)
        {
            return $"Error: {ex.Message}";
        }
    }


}
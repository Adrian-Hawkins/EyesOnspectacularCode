@page "/datetime"
@using EOSC.Common.Requests
@using EOSC.Common.Responses
@using EOSC.Common.Services
@inject DateTimeService DateTimeService

<h3>Date/Time Conversion</h3>

<div class="container mt-4">
    <div class="mb-3">
        <label for="dateTimeString" class="form-label">Date/Time String:</label>
        <input type="text" class="form-control" id="dateTimeString" @bind="dateTimeString">
    </div>

    <div class="mb-3">
        <label for="originalFormat" class="form-label">Original Format:</label>
        <input type="text" class="form-control" id="originalFormat" @bind="originalFormat">
    </div>

    <div class="mb-3">
        <label for="desiredFormat" class="form-label">Desired Format:</label>
        <input type="text" class="form-control" id="desiredFormat" @bind="desiredFormat">
    </div>

    <button type="button" class="btn btn-primary" @onclick="ConvertDateTime">Convert</button>
</div>


@if (!string.IsNullOrEmpty(convertedTime))
{
    <div class="d-flex justify-content-center align-items-center">
        <div class="card text-center" style="width: 18rem; border-radius: 20px; background-color: #fce4ec;">
            <div class="card-body">
            <h5 class="card-title" style="color: #0D47A1;">Converted Time</h5>
            <p class="card-text" style="color: #1A237E;">@convertedTime</p>
            </div>
        </div>
    </div>
}

@code {
    private string dateTimeString = "";
    private string originalFormat = "";
    private string desiredFormat = "";
    private string convertedTime = "";

    private async Task ConvertDateTime()
    {
        try
        {
            if (string.IsNullOrEmpty(dateTimeString) || string.IsNullOrEmpty(originalFormat) || string.IsNullOrEmpty(desiredFormat))
            {
                return;
            }

            var request = new DatetimeRequest(dateTimeString.Trim(), originalFormat.Trim(), desiredFormat.Trim());
            var response = await DateTimeService.ConvertDateTime(request);
            convertedTime = response.ConvertedTime;
        }
        catch (Exception ex)
        {
            convertedTime = $"Error: {ex.Message}";
        }
    }
}